%% Loading of Cell 3
masterres3=[load('%5Ccell3_1%5C%5Ccell3_1_AQuA.mat'), load('%5Ccell3_2%5C%5Ccell3_2_AQuA.mat'), load('%5Ccell3_3%5C%5Ccell3_3_AQuA.mat'),load('%5Ccell3_4%5C%5Ccell3_4_AQuA.mat'),load('%5Ccell3_5%5C%5Ccell3_5_AQuA.mat'), load('%5Ccell3_6%5C%5Ccell3_6_AQuA.mat'),load('%5Ccell3_7%5C%5Ccell3_7_AQuA.mat'),load('%5Ccell3_8%5C%5Ccell3_8_AQuA.mat'),load('%5Ccell3_9%5C%5Ccell3_9_AQuA.mat')];

%% Loading of Cell 4
masterres4=[load('%5Ccell4_1%5C%5Ccell4_1_AQuA.mat'),load('%5Ccell4_2%5C%5Ccell4_2_AQuA.mat'),load('%5Ccell4_3%5C%5Ccell4_3_AQuA.mat'),load('%5Ccell4_4%5C%5Ccell4_4_AQuA.mat'),load('%5Ccell4_5%5C%5Ccell4_5_AQuA.mat'),load('%5Ccell4_6%5C%5Ccell4_6_AQuA.mat'),load('%5Ccell4_7%5C%5Ccell4_7_AQuA.mat'),load('%5Ccell4_8%5C%5Ccell4_8_AQuA.mat'),load('%5Ccell4_9%5C%5Ccell4_9_AQuA.mat')];

%% Loading of Cell 11 
%masterres6=[load('cell6_1_AQuA.mat'),load('cell6_2_AQuA.mat'),load('cell6_3_AQuA.mat'),load('cell6_4_AQuA.mat'),load('cell6_5_AQuA.mat'),load('cell6_6_AQuA.mat'),load('cell6_7_AQuA.mat'),load('cell6_8_AQuA.mat'),load('cell6_9_AQuA.mat')];
masterres11=[load('cell11_1_AQuA.mat'),load('cell11_2_AQuA.mat'),load('cell11_3_AQuA.mat'),load('cell11_4_AQuA.mat'),load('cell11_5_AQuA.mat'),load('cell11_6_AQuA.mat'),load('cell11_7_AQuA.mat'),load('cell11_8_AQuA.mat'),load('cell11_9_AQuA.mat')];
%% Loading of Cell 8
masterres8=[load('cell8_1_AQuA.mat'),load('cell8_2_AQuA.mat')];

%% Loading of Cell 5
%masterres5=[load('cell5_1_AQuA.mat'),load('cell5_2_AQuA.mat'),load('cell5_3_AQuA.mat'),load('cell5_4_AQuA.mat'),load('cell5_5_AQuA.mat'),load('cell5_6_AQuA.mat'),load('cell5_7_AQuA.mat'),load('cell5_8_AQuA.mat'),load('cell5_9_AQuA.mat')];
%% Combine to one struct -- Open Post Aqua folder 
masterresTot=[masterres3, masterres4, masterres8, masterres11]; %  , masterres5

%% cell-specific parameters (ideally saved with the AQuA data file
for j=1:length(masterresTot)
    
    res=masterresTot(j).res;
    
    if ~exist('cell_stim_db','var')
            if exist('cell_stim_db.mat','file')
                load('cell_stim_db.mat');
            else
                error('Database not found. Include cell stimulus database in Matlab path');
            end
        end
    
    if j<= 9
        cellName = 'cell3';
        expNum = sscanf(cellName,'cell%i');

        cycleLength = cell_stim_db(expNum).stim.cycleLength;
        stimLength = cell_stim_db(expNum).stim.nFrames;
        nStims = stimLength/cycleLength;
        nBlanks = cell_stim_db(expNum).stim.nBlanks;
        frameRate = res.opts.frameRate;
        framesPerSec = 1/frameRate;

    else j>9 && j<19
        cellName = 'cell4';
        expNum = sscanf(cellName,'cell%i');

        cycleLength = cell_stim_db(expNum).stim.cycleLength;
        stimLength = cell_stim_db(expNum).stim.nFrames;
        nStims = stimLength/cycleLength;
        nBlanks = cell_stim_db(expNum).stim.nBlanks;
        frameRate = res.opts.frameRate;
        framesPerSec = 1/frameRate;
    end 
    
        if j>18 && j<21
        cellName = 'cell8';
        expNum = 8;

        cycleLength = cell_stim_db(expNum).stim.cycleLength;
        stimLength = cell_stim_db(expNum).stim.nFrames;
        nStims = stimLength/cycleLength;
        nBlanks = cell_stim_db(expNum).stim.nBlanks;
        frameRate = res.opts.frameRate;
        framesPerSec = 1/frameRate;

        end 
        
        if j>20 && j<30
        cellName = 'cell11';
        expNum = 11;

        cycleLength = cell_stim_db(expNum).stim.cycleLength;
        stimLength = cell_stim_db(expNum).stim.nFrames;
        nStims = stimLength/cycleLength;
        nBlanks = cell_stim_db(expNum).stim.nBlanks;
        frameRate = res.opts.frameRate;
        framesPerSec = 1/frameRate;

        end 
        
%                  if j>29
%         cellName = 'cell5';
%         expNum = 5;
% 
%         cycleLength = cell_stim_db(expNum).stim.cycleLength;
%         stimLength = cell_stim_db(expNum).stim.nFrames;
%         nStims = stimLength/cycleLength;
%         nBlanks = cell_stim_db(expNum).stim.nBlanks;
%         frameRate = res.opts.frameRate;
%         framesPerSec = 1/frameRate;
% 
%         end        

evtSizeCutoff = 20:20:240;
%extract the time, area, and distance of all events, as well as the dFF
    area = res.fts.basic.area; % need to calibrate this
    dFF = res.dffMat;

 %Plot 1 - Distance from Event to Soma
    for i = 1:length(res.evt);t(i) = min(min(res.riseLst{i}.dlyMap(:)));end
    dist = res.fts.region.landmarkDist.distAvg;

%Plot 2 - Small and Big Events After Onset
    % the cycle-wise plots of large and small events
    for i=1:length(evtSizeCutoff)
            smEventsTime = mod(t(area<=evtSizeCutoff(i)),cycleLength)./framesPerSec;
            lgEventsTime = mod(t(area>evtSizeCutoff(i)),cycleLength)./framesPerSec;
            smEventsArea = area(area<=evtSizeCutoff(i));
            lgEventsArea = area(area>evtSizeCutoff(i));
            smEventsDist = dist(area<=evtSizeCutoff(i));
            lgEventsDist = dist(area>evtSizeCutoff(i));

            timeCut = [0 1.5 5.5 8];

            [~,cutSmEdges] = histcounts(smEventsTime,0:.5:16.5);
            [~,minSmIn] = min(abs(cutSmEdges-timeCut(1)));
            [~,maxSmIn] = min(abs(cutSmEdges-timeCut(2)));
            targetSm = sum(double(smEventsTime>timeCut(2)).*double(smEventsTime<timeCut(3)));
            outSm = sum(double(smEventsTime>timeCut(3)).*double(smEventsTime<timeCut(4)) + ...
            double(smEventsTime<timeCut(2)));
            sizeSmRatio = targetSm/outSm;
           
            [~, cutLgEdges] = histcounts(lgEventsTime,0:.5:16.5);
            [~,minLgIn] = min(abs(cutLgEdges-timeCut(1)));
            [~,maxLgIn] = min(abs(cutLgEdges-timeCut(2)));
            targetLg = sum(double(lgEventsTime>timeCut(2)).*double(lgEventsTime<timeCut(3)));
            outLg = sum(double(lgEventsTime>timeCut(3)).*double(lgEventsTime<timeCut(4)) + ...
            double(lgEventsTime<timeCut(2)));
           if j<10
              totalEventsCell3(j)=targetLg+outLg+targetSm+outSm; 
           end 
           if j>9 && j<19
              totalEventsCell4(j)=targetLg+outLg+targetSm+outSm; 
           end 
           if j>18 && j<=20
              totalEventsCell8(j)=targetLg+outLg+targetSm+outSm; 
           end 
           if j>20 && j<30
              totalEventsCell11(j)=targetLg+outLg+targetSm+outSm; 
           end 
           totalEvents=[totalEventsCell3, totalEventsCell4(10:18), totalEventsCell8(19:20), totalEventsCell11(21:29)]';
            sizeLgRatio = targetLg/outLg;
       
        RatiosLg(i)= sizeLgRatio;
        RatiosSm(i)= sizeSmRatio;

    end
    
   if j<=9
      l=[1,2,3,4,5,6,7,8,9];
    subplot(3,3,j)
    plot(evtSizeCutoff, normalize(RatiosLg,'range'),'-*', 'linewidth', 2)
    hold on
    plot(evtSizeCutoff, normalize(RatiosSm,'range'),'-*', 'linewidth', 2)
%     hold on
    title (['Cell',sprintf('%i',expNum), 'Trial', sprintf('%d',l(j))])
    xlabel('EventCutOff 20:20:240')
    ylabel('RatioSize')
    legend('Lg', 'Sm','Location','north')
   end 
   
    hold off
  
  if j>9 && j<19
      l=[0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9];
   
    subplot(3,3,l(j))
    evtSizeCutoff(isinf(RatiosLg))= [];
    RatiosSm(isinf(RatiosLg))= [];
    RatiosLg(isinf(RatiosLg))= [];
    
    plot(evtSizeCutoff, normalize(RatiosLg,'range'),'-*', 'linewidth', 2)
    hold on
    plot(evtSizeCutoff, normalize(RatiosSm,'range'),'-*', 'linewidth', 2)
    %hold on
    title (['Cell',sprintf('%i',expNum), 'Trial', sprintf('%d',l(j))])
    xlabel('EventCutOff 20:20:240')
    ylabel('RatioSize')
    legend('Lg', 'Sm','Location','northwest')

    end 
  
  hold off
 
   if j>18 && j<=20
      l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2];
    subplot(2,1,l(j))
    plot(evtSizeCutoff, normalize(RatiosLg,'range'),'-*', 'linewidth', 2)
    hold on
    plot(evtSizeCutoff, normalize(RatiosSm,'range'),'-*', 'linewidth', 2)
    title (['Cell',sprintf('%i',expNum), 'Trial', sprintf('%d',l(j))])
    xlabel('EventCutOff 20:20:240')
    ylabel('RatioSize')
    legend('Lg', 'Sm','Location','northwest')
 
   end 
   
%      if j>20 && j<30
%       l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9];
%    
%     subplot(3,3,l(j))
%     plot(evtSizeCutoff, normalize(RatiosLg,'range'),'-*', 'linewidth', 2)
%     hold on
%     plot(evtSizeCutoff, normalize(RatiosSm,'range'),'-*', 'linewidth', 2)
%     title (['Cell',sprintf('%i',expNum), 'Trial', sprintf('%d',l(j))])
%     xlabel('EventCutOff 20:20:240')
%     ylabel('RatioSize')
%     legend('Lg', 'Sm','Location','northwest')
%      end 
    
%      if j>=30
%       l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9];
%    
%     subplot(3,3,l(j))
%     plot(evtSizeCutoff, normalize(RatiosLg,'range'),'-*', 'linewidth', 2)
%     hold on
%     plot(evtSizeCutoff, normalize(RatiosSm,'range'),'-*', 'linewidth', 2)
%     title (['Cell',sprintf('%i',expNum), 'Trial', sprintf('%d',l(j))])
%     xlabel('EventCutOff 20:20:240')
%     ylabel('RatioSize')
%     legend('Lg', 'Sm','Location','northwest')
%  
%     end 
end
