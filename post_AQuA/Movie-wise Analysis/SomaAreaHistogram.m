%% Batch for soma analysis
% Function Selection
% Choose multiple .mat files to compare critical data
clear ; close all;
path_temp = fileparts(which(mfilename));
addpath(genpath(path_temp));
clearvars path_temp; % Add subfolders to path

paths = uipickfiles('FilterSpec','*.mat');
if isnumeric(paths)
    error('No file Selected');
end
imageSavePath = 'C:\Users\carlo\Desktop\Soma Analyis figures'; %Path to save images generated by hotSpot
%% Loading and Extraction

file_number = numel(paths);
thresh = 50;            % Score threshold for moving events
fl = cell(1 , file_number);
names = cell(1 , file_number);
T(1:file_number) = struct('res',[],'SizeThr',[]);
 
for n = 1:file_number
    [p,names{n},ext] = fileparts(paths{n});
    addpath(p)
    filename = strcat(names{n},ext);
    names{n} = erase(names{n} , '_AQuA');

    dummy = load(filename);
    T(n).res = dummy.res;  % Data from all trials is stored here
    fprintf('File %i out of %i Loaded\n' , n , file_number);

    filename = string(strsplit(filename,'_'));
    filename = strsplit(filename(2),'.');
    fl(n) = {filename(1)};

    if ~isfield(T(n).res,'fts')
        error('Landmark was not selected during Pre-Processing');
    end

    rmpath(p)
%  T(n).SizeThr = SizeThr(T(n).res,0);
    clear dummy
end
%% Calling Soma conditional heat map function
   for n = 1:numel(T)
        %% Intitalize
    picsize = size(T(n).res.datOrg);
    totalmap = zeros(picsize(1),picsize(2));
%% Filter out small events
whichevt = 1:length(T(n).res.evt);
mnIm = mean(T(n).res.datOrg,3);
coveredSomaArea = zeros(size(T(n).res.evt));
insideSomaArea = zeros(size(T(n).res.evt));
landmarkmask = T(n).res.fts.region.landMark.mask{1,1};
areaofsoma = T(n).res.opts.spatialRes * sum(sum(landmarkmask));
picsize = size(T(n).res.datOrg);
%% Area Calculation
for ii = whichevt
evtXYpix = [];
somaint = [];
areaint = [];
evtXYpix = T(n).res.fts.loc.x2D{(ii)};
evtMap = zeros(picsize(1),picsize(2));
evtMap(evtXYpix) = 2;
somaint = evtMap + landmarkmask;
areaint = evtMap - landmarkmask;
somacovered(n,ii)  = (nnz(somaint==3)./nnz(landmarkmask)).*100; %percentage of soma covered by soma
areacovered(n,ii)  = (nnz(areaint==1)./nnz(evtMap)).*100; %percentage of event covered by soma
end
%% Conditions to be considered a seed
seeds = find(somacovered >= 1 & areacovered > 90); %% Deciding on the events that are included on the heat map
   end
%% Finding the values that are of intrests for somacovered and area covered

for n = 1:numel(T)
    ssoma = somacovered(n,:);
    aarea = areacovered(n,:);
    somaofintrest = ssoma(ssoma>0 & ssoma<=10);
    areaofintrest = aarea(aarea>90);
    areasofeventsofintrest = T(n).res.fts.basic.area(aarea>90);
    s.(append('parameter',num2str(n))).ValuesOfSomaCovered = somaofintrest;
    s.(append('parameter',num2str(n))).ValuesOfAreaCovered = areaofintrest;
    s.(append('parameter',num2str(n))).AreasOf90orMorecovered = areasofeventsofintrest;
end
% % Histogram figure
figure(1)
for n = 1:numel(T)
subplot(3,3,n)
histogram(s.(append('parameter',num2str(n))).ValuesOfSomaCovered)
title((append('parameter',num2str(n))))
xlabel('% of Soma Covered')
ylabel('# of events')
end
sgtitle(append(T(n).res.opts.fileName(1:5),' Histogram of events that cover at least 1 pixel to 10% of Soma'),'FontSize',12)
figure(2)
for n = 1:numel(T)
subplot(3,3,n)
histogram(s.(append('parameter',num2str(n))).ValuesOfAreaCovered)
title((append('parameter',num2str(n))))
xlabel('% of Area Covered')
ylabel('# of events')
end
sgtitle(append(T(n).res.opts.fileName(1:5),' Histogram of the Area of event covered by soma (from 90% to 100%)'),'FontSize',12)
figure(3)
for n = 1:numel(T) 
subplot(3,3,n)
histogram(s.(append('parameter',num2str(n))).AreasOf90orMorecovered)
title((append('parameter',num2str(n))))
xlabel('Area (microns^2)')
ylabel('# of events')
end
sgtitle(append(T(n).res.opts.fileName(1:5),' Histogram of Area of Events mostly covered by soma (90% to 100% covered)'),'FontSize',12)
figure(4)
for n = 1:numel(T) 
subplot(3,3,n)
histogram(T(n).res.fts.basic.area)
title((append('parameter',num2str(n))))
xlabel('Area (microns^2)')
ylabel('# of events')
end
sgtitle(append(T(n).res.opts.fileName(1:5),' Histogram of All Event Areas'),'FontSize',12)
figure(5) % Histogram of areas under 50 microns
for n = 1:numel(T) 
subplot(3,3,n)
histogram(T(n).res.fts.basic.area(T(n).res.fts.basic.area<50))
title((append('parameter',num2str(n))))
xlabel('Area (microns^2)')
ylabel('# of events')
xlim([0 50])
end
sgtitle(append(T(n).res.opts.fileName(1:5),' Histogram of All Event Areas under 50 microns^2'),'FontSize',12)